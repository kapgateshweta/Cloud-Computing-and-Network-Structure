Load balancer public IP: 54.187.182.77
Server1 private IP: 172.31.25.202
Server1 private IP: 172.31.16.138
Server1 private IP: 172.31.29.109
Experiment Goals: Experiment application fault tolerance for different amount of servers.

1. Create 2 VM as apache servers and install php5, and then create index.php file for each of them.
check the file index1.php  index2.php


2. Open VM as balancer and set the configuration file to make it connect to servers created before.
Configuration :

<VirtualHost *:*>
ServerAdmin webmaster@localhost
DocumentRoot /var/www/html

ErrorLog ${APACHE_LOG_DIR}/error.log
CustomLog ${APACHE_LOG_DIR}/access.log combined

ProxyPass / balancer://fzjh/
ProxyPassReverse / balancer://fzjh/

</VirtualHost>
ProxyRequests Off
<Proxy balancer://fzjh>
BalancerMember http://172.31.25.202:80 loadfactor=2
BalancerMember http://172.31.16.138:80 loadfactor=2

</Proxy>


3. Open VM as client to run a loop of curl so that it could continue visit the balancer.
	check the file	Loop.sh 


4. Restart one of the servers to see what would happen.
5. Open another VM as the third server and change configuration file of balancer to make it randomly visit to one of the 3 servers.
 check the file 000-default.conf  and index3.php

6. Run loop.sh again.
7. Restart one of the servers to see what would happen.
8. Result 

2 servers experiment result: 
When I run loop.sh to continually visit load balancer, it will redirect to server1 or server2. Once I restart server 1, it will report “ Proxy Error” . After the server1 restarted, it could redirect to server1 again.
We can use access.log of 2 servers and load balancer to analysis the connection before and after restart the server 1
We can use the clause 
grep load.php /var/log/apache2/access.log|awk '{print $10,$4}' |sed 's/\[//g' | awk -F\: '{print $1"_"$2"_"$3}' | awk '{arr[$2]+=$1}END{for(i in arr) print i,arr[i]/60}'  
to get the connections per minute.

    Time           server1               server2        balancer
31/Mar/2016_20_23  463.12	  	480.03       	763.42
31/Mar/2016_20_24  501.23    		513.28		714.20
31/Mar/2016_20_25  442.23	 	485.34		795.48
31/Mar/2016_20_26    0	  		624.326        	701.25      (server1 stop)
31/Mar/2016_20_27    0	  		643.23		679.43
31/Mar/2016_20_28  246.32	 	603.27         742.23     (server1 restart)
31/Mar/2016_20_29  471.23	  	549.23   	758.67
31/Mar/2016_20_30  442.39	  	487.324		769.54
We could know from the log file, the number of connection to server 2 goes up and then goes down. That is because when we restart server 1, it will stop working and the load balancer redirect the request to server 2. Once the server 1 restarted, it will working again, the connection go back to the original.
3 servers experiment result: 
After I create the third server and make the load balancer redirect to it. When I run the loop.sh, it could visit the 3 servers randomly.  Once I restart the server 3, it didn’t report “Proxy Error” and performed like before, only the connection speed had obvious reduction because of the CPU consuming.  
We can analysis the log file of the 3 servers and the balancer:
    Time              server1     server2     server3     balancer
31/Mar/2016_20_37     445.29      451.53      468.32      1021.23
31/Mar/2016_20_38     424.45      448.55      461.92      1056.29
31/Mar/2016_20_39     496.67      513.26      0     	  815.37     server 3 stop
31/Mar/2016_20_40     533.89      408.34      0		  754.29
31/Mar/2016_20_41     478.52      505.23      127.23      963.23     server 3 restart
31/Mar/2016_20_42     458.68      443.06      432.45      1033.57
31/Mar/2016_20_43     437.97      462.84      472.41      1079.45
31/Mar/2016_20_44     439.60      483.13      474.72      1032.3

check the chart file to show the connection to the 3 servers and load balancer: 
 

9. Conclusion
From the experiment we know 3 servers system is much more stable than 2 servers system. That’s because the use of load balancer to optimally assigning works to multiple servers can effectively improve fault tolerance of a system. And the more servers for a service, more stable the system is.
